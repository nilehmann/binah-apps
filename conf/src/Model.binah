predicate isAuthor   :: UserId -> PaperId -> Bool
predicate isAccepted :: PaperId -> Bool
predicate isReviewer :: UserId -> PaperId -> Bool

User
  username Text
  name Text
  email Text @ChairOrSelf
  affiliation Text
  level String

Paper
  author UserId @PcOrAuthorOrAccepted
  title Text    @PcOrAuthorOrAccepted
  abstract Text @PcOrAuthorOrAccepted 
  accepted Bool @PcOrPublic

  assert [isAuthor author entityKey]
  assert [accepted => isAccepted entityKey]

  insert {\paper viewer -> paperAuthor paper == entityKey viewer && paperAccepted paper == False && currentStage == SubmitStage}

PaperCoauthor
  paper PaperId @PcOrAuthorOrAccepted'
  author Text   @PcOrAuthorOrAccepted'

ReviewAssignment
  paper PaperId   @OnlyPc
  user UserId     @OnlyPc
  assignType Text @OnlyPc

  assert [isReviewer user paper]

  insert {\row viewer -> IsPc viewer && currentStage == ReviewStage}

Review
  paper PaperId   @PcOrAuthorIfPublic
  reviewer UserId @OnlyPc
  content Text    @PcOrAuthorIfPublic
  score Int       @PcOrAuthorIfPublic

  insert {\review viewer -> currentStage == ReviewStage && reviewReviewer review == entityKey viewer && isReviewer (entityKey viewer) (reviewPaper review)}

policy IsChair = \user -> userLevel user == "chair"

policy IsPc = \user -> userLevel user == "pc" || userLevel user == "chair"

policy ChairOrSelf = \user viewer ->
  IsChair viewer || entityKey viewer == entityKey user

policy PcOrPublic = \row viewer ->
  IsPc viewer || currentStage == PublicStage

policy PcOrAuthorOrAccepted = \paper viewer ->
  IsPc viewer ||
  isAuthor (entityKey viewer) (entityKey paper) ||
  (currentStage == PublicStage && paperAccepted paper)

policy PcOrAuthorOrAccepted' = \coauthor viewer ->
  IsPc viewer ||
  isAuthor (entityKey viewer) (paperCoauthorPaper coauthor) ||
  (currentStage == PublicStage && isAccepted (paperCoauthorPaper coauthor))

policy OnlyPc = \row viewer -> IsPc viewer

policy PcOrAuthorIfPublic = \review viewer -> 
    IsPc viewer ||
    (currentStage == PublicStage &&
      isAuthor (entityKey viewer) (reviewPaper review))

#inline
{-@ data Stage = SubmitStage | ReviewStage | PublicStage @-}
data Stage = SubmitStage | ReviewStage | PublicStage deriving Eq

{-@ inline currentStage @-}
currentStage :: Stage
currentStage = SubmitStage
