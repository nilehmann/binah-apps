predicate friends :: UserId -> UserId -> Bool

User
  name Text
  username Text

Wish
  owner UserId
  description Text
  accessLevel String
  
  -- You can read the description if one the following holds:
  -- 1. You are the owner of the wish.
  -- 2. The wish has "public" access .
  -- 3. The wish has "friends" access level and the owner is your friend.
  read [ description ] @PublicOrFriends

  -- You can only create wishes for yourself.
  insert @IsOwner

  -- Only the owner can modify the description and accessLevel
  update [ description, accessLevel ] { \old new user -> IsOwner old user }

  -- Ownership cannot be transferred
  -- Note: what should be the default behavior?
  update [ owner ] { \old new user -> False }

-- With the insert and update policies this is looking more as a *follows* relationship
-- ith user1 the follower and user2 the followee, but I'm keeping the name for now.
Friendship
  user1 UserId
  user2 UserId
  status String

  -- User1 is friends with user2 if there's is an accepted relationship
  assert [status == "accepted" => friends user1 user2]

  -- The session user can create a relationship if they create it as "pending" and they set 
  -- themselves as the first user.
  insert { \row user -> friendshipUser1 row == entityKey user && friendshipStatus row == "pending" }

  -- The second user in the relationship can change the status to accepted or rejected but they
  -- cannot set it again as pending.
  -- Optional: the status can only be modified if it is "pending", i.e., you can only modify the
  -- relationship once and either accept it or reject it.
  update 
    [ status ] 
    { \old new user -> 
        friendshipUser2 old == entityKey user && 
        -- Optional:
        -- friendshipStatus old == "pending" &&
        (friendshipStatus new == "accepted" || friendshipStatus new == "rejected")
    }

  -- Once the relationship is created you cannot modify its users.
  update [user1, user2] {\old new user -> False}

policy PublicOrFriends = \wish viewer ->
  wishAccessLevel wish == "public" ||
  wishOwner wish == entityKey viewer ||
  (wishAccessLevel wish == "friends"
    && friends (wishOwner wish) (entityKey viewer))

policy IsOwner = \wish viewer ->
  wishOwner wish == entityKey viewer
  
